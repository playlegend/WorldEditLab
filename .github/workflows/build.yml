name: WorldEditLab
on:
  push:
    branches:
      - dev
      - prod
      - feature/*
      - bugfix/*
      - hotfix/*
    tags:
      - 'v*.*.*'
    pull_request:
jobs:
  lint_css:
    name: "WorldEditLab Lint CSS"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install modules
        run: yarn install
      - name: Run ESLint
        run: yarn lint:css
  lint_ts:
    name: "WorldEditLab Lint TS"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install modules
        run: yarn install
      - name: Run ESLint
        run: yarn lint:ts
  release:
    name: "WorldEditLab Release"
    runs-on: self-hosted
    needs: [lint_css, lint_ts]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: playlegend/worldeditlab
          tag-semver: |
            {{version}}
            {{major}}.{{minor}}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.dockerHubUser }}
          password: ${{ secrets.dockerHubToken }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

